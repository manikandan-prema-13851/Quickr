// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imgDetails.proto
// Protobuf C++ Version: 5.26.1

#include "imgDetails.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr malwareClassifierAnalysis::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : multifamilyresult_{0},
        benignprob_{0},
        downloaderinstallerdropperprob_{0},
        flooderinfectorvirusprob_{0},
        ransomwareprob_{0},
        spywarestealerprob_{0},
        wormprob_{0},
        backdoorprob_{0},
        genericprob_{0},
        importprob_{0},
        featureprob_{0},
        combineprob_{0},
        binarymodelresult_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR malwareClassifierAnalysis::malwareClassifierAnalysis(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct malwareClassifierAnalysisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR malwareClassifierAnalysisDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~malwareClassifierAnalysisDefaultTypeInternal() {}
  union {
    malwareClassifierAnalysis _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 malwareClassifierAnalysisDefaultTypeInternal _malwareClassifierAnalysis_default_instance_;

inline constexpr ImgDetails::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        publisher_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        catafile_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        vsignchainversion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        digestalgorithm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        imphase_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        imphash_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        permission_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        product_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        internalname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        copyrights_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        orgfilename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        productversion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fileversion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mimetype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filetypeext_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        writetime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        accesstime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        createtime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        md5le_buffer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sha1_buffer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sha256_buffer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sha512_buffer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        thumbprint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sign_alg_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filepath_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        importfunctionstring_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        properfilepath_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        patternstring_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        errorcodestring_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        importarray_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        featurearray_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mcanalysis_{nullptr},
        filesize_{0},
        signtype_{0},
        numberofcertchains_{0},
        characteristics_{0},
        filetype_{0},
        binarytime_{0},
        binarytype_{0},
        machinetype_{0},
        ismalware_{0},
        confidence_{0},
        impmalware_{0},
        featuremalware_{0},
        errorcode_{0},
        patternoffset_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ImgDetails::ImgDetails(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImgDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImgDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImgDetailsDefaultTypeInternal() {}
  union {
    ImgDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImgDetailsDefaultTypeInternal _ImgDetails_default_instance_;
static ::_pb::Metadata file_level_metadata_imgDetails_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_imgDetails_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_imgDetails_2eproto = nullptr;
const ::uint32_t
    TableStruct_imgDetails_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.multifamilyresult_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.benignprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.downloaderinstallerdropperprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.flooderinfectorvirusprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.ransomwareprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.spywarestealerprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.wormprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.backdoorprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.genericprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.importprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.featureprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.combineprob_),
        PROTOBUF_FIELD_OFFSET(::malwareClassifierAnalysis, _impl_.binarymodelresult_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.publisher_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.catafile_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.vsignchainversion_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.digestalgorithm_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.imphase_hash_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.imphash_string_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.permission_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.company_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.product_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.internalname_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.copyrights_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.orgfilename_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.productversion_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.fileversion_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.mimetype_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.filetypeext_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.writetime_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.accesstime_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.createtime_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.md5le_buffer_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.sha1_buffer_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.sha256_buffer_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.sha512_buffer_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.thumbprint_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.sign_alg_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.filesize_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.signtype_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.numberofcertchains_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.characteristics_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.filetype_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.binarytime_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.binarytype_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.machinetype_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.ismalware_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.confidence_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.impmalware_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.featuremalware_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.filepath_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.errorcode_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.mcanalysis_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.importfunctionstring_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.properfilepath_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.patternstring_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.patternoffset_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.errorcodestring_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.importarray_),
        PROTOBUF_FIELD_OFFSET(::ImgDetails, _impl_.featurearray_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::malwareClassifierAnalysis)},
        {21, 79, -1, sizeof(::ImgDetails)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_malwareClassifierAnalysis_default_instance_._instance,
    &::_ImgDetails_default_instance_._instance,
};
const char descriptor_table_protodef_imgDetails_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020imgDetails.proto\"\336\002\n\031malwareClassifier"
    "Analysis\022\031\n\021multifamilyResult\030\001 \001(\005\022\022\n\nB"
    "enignProb\030\002 \001(\002\022&\n\036DownloaderInstallerDr"
    "opperProb\030\003 \001(\002\022 \n\030FlooderInfectorVirusP"
    "rob\030\004 \001(\002\022\026\n\016RansomwareProb\030\005 \001(\002\022\032\n\022Spy"
    "wareStealerProb\030\006 \001(\002\022\020\n\010WormProb\030\007 \001(\002\022"
    "\024\n\014BackdoorProb\030\010 \001(\002\022\023\n\013GenericProb\030\t \001"
    "(\002\022\022\n\nImportProb\030\n \001(\002\022\023\n\013featureProb\030\013 "
    "\001(\002\022\023\n\013combineProb\030\014 \001(\002\022\031\n\021binaryModelR"
    "esult\030\r \001(\005\"\306\010\n\nImgDetails\022\021\n\tpublisher\030"
    "\001 \001(\014\022\020\n\010CataFile\030\002 \001(\014\022\021\n\tTimeStamp\030\003 \001"
    "(\014\022\031\n\021VSignChainversion\030\004 \001(\014\022\027\n\017DigestA"
    "lgorithm\030\005 \001(\014\022\024\n\014Imphase_hash\030\006 \001(\014\022\026\n\016"
    "imphash_string\030\007 \001(\014\022\022\n\nPermission\030\010 \001(\014"
    "\022\017\n\007Company\030\t \001(\014\022\023\n\013Description\030\n \001(\014\022\017"
    "\n\007Product\030\013 \001(\014\022\024\n\014InternalName\030\014 \001(\014\022\022\n"
    "\nCopyRights\030\r \001(\014\022\023\n\013Orgfilename\030\016 \001(\014\022\026"
    "\n\016ProductVersion\030\017 \001(\014\022\023\n\013FileVersion\030\020 "
    "\001(\014\022\020\n\010Mimetype\030\021 \001(\014\022\023\n\013filetypeext\030\022 \001"
    "(\014\022\021\n\tWritetime\030\023 \001(\014\022\022\n\nAccesstime\030\024 \001("
    "\014\022\022\n\nCreatetime\030\025 \001(\014\022\024\n\014MD5LE_buffer\030\026 "
    "\001(\014\022\023\n\013SHA1_buffer\030\027 \001(\014\022\025\n\rSHA256_buffe"
    "r\030\030 \001(\014\022\025\n\rSHA512_buffer\030\031 \001(\014\022\016\n\006status"
    "\030\032 \001(\014\022\022\n\nthumbprint\030\033 \001(\014\022\020\n\010sign_alg\030\034"
    " \001(\014\022\020\n\010fileSize\030\035 \001(\005\022\020\n\010Signtype\030\036 \001(\005"
    "\022\032\n\022NumberofCertChains\030\037 \001(\005\022\027\n\017Characte"
    "ristics\030  \001(\005\022\020\n\010Filetype\030! \001(\005\022\022\n\nBinar"
    "ytime\030\" \001(\005\022\022\n\nBinaryType\030# \001(\005\022\023\n\013Machi"
    "neType\030$ \001(\005\022\021\n\tisMalware\030% \001(\005\022\022\n\nconfi"
    "dence\030& \001(\002\022\022\n\nimpMalware\030\' \001(\005\022\026\n\016featu"
    "reMalware\030( \001(\005\022\020\n\010filePath\030* \001(\014\022\021\n\tErr"
    "orCode\030+ \001(\005\022.\n\nMCAnalysis\030, \001(\0132\032.malwa"
    "reClassifierAnalysis\022\034\n\024importFunctionst"
    "ring\030- \001(\014\022\026\n\016properFilePath\030/ \001(\014\022\025\n\rpa"
    "tternstring\0300 \001(\014\022\025\n\rpatternOffset\0301 \001(\005"
    "\022\027\n\017ErrorCodestring\0302 \001(\014\022\023\n\013importArray"
    "\0303 \001(\014\022\024\n\014featureArray\0304 \001(\014b\006proto3"
};
static ::absl::once_flag descriptor_table_imgDetails_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_imgDetails_2eproto = {
    false,
    false,
    1476,
    descriptor_table_protodef_imgDetails_2eproto,
    "imgDetails.proto",
    &descriptor_table_imgDetails_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_imgDetails_2eproto::offsets,
    file_level_metadata_imgDetails_2eproto,
    file_level_enum_descriptors_imgDetails_2eproto,
    file_level_service_descriptors_imgDetails_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_imgDetails_2eproto_getter() {
  return &descriptor_table_imgDetails_2eproto;
}
// ===================================================================

class malwareClassifierAnalysis::_Internal {
 public:
};

malwareClassifierAnalysis::malwareClassifierAnalysis(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:malwareClassifierAnalysis)
}
malwareClassifierAnalysis::malwareClassifierAnalysis(
    ::google::protobuf::Arena* arena, const malwareClassifierAnalysis& from)
    : malwareClassifierAnalysis(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE malwareClassifierAnalysis::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void malwareClassifierAnalysis::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, multifamilyresult_),
           0,
           offsetof(Impl_, binarymodelresult_) -
               offsetof(Impl_, multifamilyresult_) +
               sizeof(Impl_::binarymodelresult_));
}
malwareClassifierAnalysis::~malwareClassifierAnalysis() {
  // @@protoc_insertion_point(destructor:malwareClassifierAnalysis)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void malwareClassifierAnalysis::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
malwareClassifierAnalysis::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_._cached_size_),
              false,
          },
          &malwareClassifierAnalysis::MergeImpl,
          &malwareClassifierAnalysis::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void malwareClassifierAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:malwareClassifierAnalysis)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.multifamilyresult_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.binarymodelresult_) -
      reinterpret_cast<char*>(&_impl_.multifamilyresult_)) + sizeof(_impl_.binarymodelresult_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* malwareClassifierAnalysis::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 0, 2> malwareClassifierAnalysis::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_malwareClassifierAnalysis_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::malwareClassifierAnalysis>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 multifamilyResult = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(malwareClassifierAnalysis, _impl_.multifamilyresult_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.multifamilyresult_)}},
    // float BenignProb = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.benignprob_)}},
    // float DownloaderInstallerDropperProb = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.downloaderinstallerdropperprob_)}},
    // float FlooderInfectorVirusProb = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.flooderinfectorvirusprob_)}},
    // float RansomwareProb = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.ransomwareprob_)}},
    // float SpywareStealerProb = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.spywarestealerprob_)}},
    // float WormProb = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.wormprob_)}},
    // float BackdoorProb = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.backdoorprob_)}},
    // float GenericProb = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.genericprob_)}},
    // float ImportProb = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.importprob_)}},
    // float featureProb = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.featureprob_)}},
    // float combineProb = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.combineprob_)}},
    // int32 binaryModelResult = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(malwareClassifierAnalysis, _impl_.binarymodelresult_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.binarymodelresult_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 multifamilyResult = 1;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.multifamilyresult_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float BenignProb = 2;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.benignprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float DownloaderInstallerDropperProb = 3;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.downloaderinstallerdropperprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float FlooderInfectorVirusProb = 4;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.flooderinfectorvirusprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float RansomwareProb = 5;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.ransomwareprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float SpywareStealerProb = 6;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.spywarestealerprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float WormProb = 7;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.wormprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float BackdoorProb = 8;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.backdoorprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float GenericProb = 9;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.genericprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ImportProb = 10;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.importprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float featureProb = 11;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.featureprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float combineProb = 12;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.combineprob_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 binaryModelResult = 13;
    {PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.binarymodelresult_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* malwareClassifierAnalysis::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:malwareClassifierAnalysis)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 multifamilyResult = 1;
  if (this->_internal_multifamilyresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_multifamilyresult(), target);
  }

  // float BenignProb = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_benignprob = this->_internal_benignprob();
  ::uint32_t raw_benignprob;
  memcpy(&raw_benignprob, &tmp_benignprob, sizeof(tmp_benignprob));
  if (raw_benignprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_benignprob(), target);
  }

  // float DownloaderInstallerDropperProb = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_downloaderinstallerdropperprob = this->_internal_downloaderinstallerdropperprob();
  ::uint32_t raw_downloaderinstallerdropperprob;
  memcpy(&raw_downloaderinstallerdropperprob, &tmp_downloaderinstallerdropperprob, sizeof(tmp_downloaderinstallerdropperprob));
  if (raw_downloaderinstallerdropperprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_downloaderinstallerdropperprob(), target);
  }

  // float FlooderInfectorVirusProb = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_flooderinfectorvirusprob = this->_internal_flooderinfectorvirusprob();
  ::uint32_t raw_flooderinfectorvirusprob;
  memcpy(&raw_flooderinfectorvirusprob, &tmp_flooderinfectorvirusprob, sizeof(tmp_flooderinfectorvirusprob));
  if (raw_flooderinfectorvirusprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_flooderinfectorvirusprob(), target);
  }

  // float RansomwareProb = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ransomwareprob = this->_internal_ransomwareprob();
  ::uint32_t raw_ransomwareprob;
  memcpy(&raw_ransomwareprob, &tmp_ransomwareprob, sizeof(tmp_ransomwareprob));
  if (raw_ransomwareprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ransomwareprob(), target);
  }

  // float SpywareStealerProb = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_spywarestealerprob = this->_internal_spywarestealerprob();
  ::uint32_t raw_spywarestealerprob;
  memcpy(&raw_spywarestealerprob, &tmp_spywarestealerprob, sizeof(tmp_spywarestealerprob));
  if (raw_spywarestealerprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_spywarestealerprob(), target);
  }

  // float WormProb = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_wormprob = this->_internal_wormprob();
  ::uint32_t raw_wormprob;
  memcpy(&raw_wormprob, &tmp_wormprob, sizeof(tmp_wormprob));
  if (raw_wormprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_wormprob(), target);
  }

  // float BackdoorProb = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_backdoorprob = this->_internal_backdoorprob();
  ::uint32_t raw_backdoorprob;
  memcpy(&raw_backdoorprob, &tmp_backdoorprob, sizeof(tmp_backdoorprob));
  if (raw_backdoorprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_backdoorprob(), target);
  }

  // float GenericProb = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_genericprob = this->_internal_genericprob();
  ::uint32_t raw_genericprob;
  memcpy(&raw_genericprob, &tmp_genericprob, sizeof(tmp_genericprob));
  if (raw_genericprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_genericprob(), target);
  }

  // float ImportProb = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_importprob = this->_internal_importprob();
  ::uint32_t raw_importprob;
  memcpy(&raw_importprob, &tmp_importprob, sizeof(tmp_importprob));
  if (raw_importprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_importprob(), target);
  }

  // float featureProb = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_featureprob = this->_internal_featureprob();
  ::uint32_t raw_featureprob;
  memcpy(&raw_featureprob, &tmp_featureprob, sizeof(tmp_featureprob));
  if (raw_featureprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_featureprob(), target);
  }

  // float combineProb = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_combineprob = this->_internal_combineprob();
  ::uint32_t raw_combineprob;
  memcpy(&raw_combineprob, &tmp_combineprob, sizeof(tmp_combineprob));
  if (raw_combineprob != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_combineprob(), target);
  }

  // int32 binaryModelResult = 13;
  if (this->_internal_binarymodelresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_binarymodelresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:malwareClassifierAnalysis)
  return target;
}

::size_t malwareClassifierAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:malwareClassifierAnalysis)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 multifamilyResult = 1;
  if (this->_internal_multifamilyresult() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_multifamilyresult());
  }

  // float BenignProb = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_benignprob = this->_internal_benignprob();
  ::uint32_t raw_benignprob;
  memcpy(&raw_benignprob, &tmp_benignprob, sizeof(tmp_benignprob));
  if (raw_benignprob != 0) {
    total_size += 5;
  }

  // float DownloaderInstallerDropperProb = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_downloaderinstallerdropperprob = this->_internal_downloaderinstallerdropperprob();
  ::uint32_t raw_downloaderinstallerdropperprob;
  memcpy(&raw_downloaderinstallerdropperprob, &tmp_downloaderinstallerdropperprob, sizeof(tmp_downloaderinstallerdropperprob));
  if (raw_downloaderinstallerdropperprob != 0) {
    total_size += 5;
  }

  // float FlooderInfectorVirusProb = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_flooderinfectorvirusprob = this->_internal_flooderinfectorvirusprob();
  ::uint32_t raw_flooderinfectorvirusprob;
  memcpy(&raw_flooderinfectorvirusprob, &tmp_flooderinfectorvirusprob, sizeof(tmp_flooderinfectorvirusprob));
  if (raw_flooderinfectorvirusprob != 0) {
    total_size += 5;
  }

  // float RansomwareProb = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ransomwareprob = this->_internal_ransomwareprob();
  ::uint32_t raw_ransomwareprob;
  memcpy(&raw_ransomwareprob, &tmp_ransomwareprob, sizeof(tmp_ransomwareprob));
  if (raw_ransomwareprob != 0) {
    total_size += 5;
  }

  // float SpywareStealerProb = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_spywarestealerprob = this->_internal_spywarestealerprob();
  ::uint32_t raw_spywarestealerprob;
  memcpy(&raw_spywarestealerprob, &tmp_spywarestealerprob, sizeof(tmp_spywarestealerprob));
  if (raw_spywarestealerprob != 0) {
    total_size += 5;
  }

  // float WormProb = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_wormprob = this->_internal_wormprob();
  ::uint32_t raw_wormprob;
  memcpy(&raw_wormprob, &tmp_wormprob, sizeof(tmp_wormprob));
  if (raw_wormprob != 0) {
    total_size += 5;
  }

  // float BackdoorProb = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_backdoorprob = this->_internal_backdoorprob();
  ::uint32_t raw_backdoorprob;
  memcpy(&raw_backdoorprob, &tmp_backdoorprob, sizeof(tmp_backdoorprob));
  if (raw_backdoorprob != 0) {
    total_size += 5;
  }

  // float GenericProb = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_genericprob = this->_internal_genericprob();
  ::uint32_t raw_genericprob;
  memcpy(&raw_genericprob, &tmp_genericprob, sizeof(tmp_genericprob));
  if (raw_genericprob != 0) {
    total_size += 5;
  }

  // float ImportProb = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_importprob = this->_internal_importprob();
  ::uint32_t raw_importprob;
  memcpy(&raw_importprob, &tmp_importprob, sizeof(tmp_importprob));
  if (raw_importprob != 0) {
    total_size += 5;
  }

  // float featureProb = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_featureprob = this->_internal_featureprob();
  ::uint32_t raw_featureprob;
  memcpy(&raw_featureprob, &tmp_featureprob, sizeof(tmp_featureprob));
  if (raw_featureprob != 0) {
    total_size += 5;
  }

  // float combineProb = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_combineprob = this->_internal_combineprob();
  ::uint32_t raw_combineprob;
  memcpy(&raw_combineprob, &tmp_combineprob, sizeof(tmp_combineprob));
  if (raw_combineprob != 0) {
    total_size += 5;
  }

  // int32 binaryModelResult = 13;
  if (this->_internal_binarymodelresult() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_binarymodelresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void malwareClassifierAnalysis::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<malwareClassifierAnalysis*>(&to_msg);
  auto& from = static_cast<const malwareClassifierAnalysis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:malwareClassifierAnalysis)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_multifamilyresult() != 0) {
    _this->_impl_.multifamilyresult_ = from._impl_.multifamilyresult_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_benignprob = from._internal_benignprob();
  ::uint32_t raw_benignprob;
  memcpy(&raw_benignprob, &tmp_benignprob, sizeof(tmp_benignprob));
  if (raw_benignprob != 0) {
    _this->_impl_.benignprob_ = from._impl_.benignprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_downloaderinstallerdropperprob = from._internal_downloaderinstallerdropperprob();
  ::uint32_t raw_downloaderinstallerdropperprob;
  memcpy(&raw_downloaderinstallerdropperprob, &tmp_downloaderinstallerdropperprob, sizeof(tmp_downloaderinstallerdropperprob));
  if (raw_downloaderinstallerdropperprob != 0) {
    _this->_impl_.downloaderinstallerdropperprob_ = from._impl_.downloaderinstallerdropperprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_flooderinfectorvirusprob = from._internal_flooderinfectorvirusprob();
  ::uint32_t raw_flooderinfectorvirusprob;
  memcpy(&raw_flooderinfectorvirusprob, &tmp_flooderinfectorvirusprob, sizeof(tmp_flooderinfectorvirusprob));
  if (raw_flooderinfectorvirusprob != 0) {
    _this->_impl_.flooderinfectorvirusprob_ = from._impl_.flooderinfectorvirusprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ransomwareprob = from._internal_ransomwareprob();
  ::uint32_t raw_ransomwareprob;
  memcpy(&raw_ransomwareprob, &tmp_ransomwareprob, sizeof(tmp_ransomwareprob));
  if (raw_ransomwareprob != 0) {
    _this->_impl_.ransomwareprob_ = from._impl_.ransomwareprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_spywarestealerprob = from._internal_spywarestealerprob();
  ::uint32_t raw_spywarestealerprob;
  memcpy(&raw_spywarestealerprob, &tmp_spywarestealerprob, sizeof(tmp_spywarestealerprob));
  if (raw_spywarestealerprob != 0) {
    _this->_impl_.spywarestealerprob_ = from._impl_.spywarestealerprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_wormprob = from._internal_wormprob();
  ::uint32_t raw_wormprob;
  memcpy(&raw_wormprob, &tmp_wormprob, sizeof(tmp_wormprob));
  if (raw_wormprob != 0) {
    _this->_impl_.wormprob_ = from._impl_.wormprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_backdoorprob = from._internal_backdoorprob();
  ::uint32_t raw_backdoorprob;
  memcpy(&raw_backdoorprob, &tmp_backdoorprob, sizeof(tmp_backdoorprob));
  if (raw_backdoorprob != 0) {
    _this->_impl_.backdoorprob_ = from._impl_.backdoorprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_genericprob = from._internal_genericprob();
  ::uint32_t raw_genericprob;
  memcpy(&raw_genericprob, &tmp_genericprob, sizeof(tmp_genericprob));
  if (raw_genericprob != 0) {
    _this->_impl_.genericprob_ = from._impl_.genericprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_importprob = from._internal_importprob();
  ::uint32_t raw_importprob;
  memcpy(&raw_importprob, &tmp_importprob, sizeof(tmp_importprob));
  if (raw_importprob != 0) {
    _this->_impl_.importprob_ = from._impl_.importprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_featureprob = from._internal_featureprob();
  ::uint32_t raw_featureprob;
  memcpy(&raw_featureprob, &tmp_featureprob, sizeof(tmp_featureprob));
  if (raw_featureprob != 0) {
    _this->_impl_.featureprob_ = from._impl_.featureprob_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_combineprob = from._internal_combineprob();
  ::uint32_t raw_combineprob;
  memcpy(&raw_combineprob, &tmp_combineprob, sizeof(tmp_combineprob));
  if (raw_combineprob != 0) {
    _this->_impl_.combineprob_ = from._impl_.combineprob_;
  }
  if (from._internal_binarymodelresult() != 0) {
    _this->_impl_.binarymodelresult_ = from._impl_.binarymodelresult_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void malwareClassifierAnalysis::CopyFrom(const malwareClassifierAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:malwareClassifierAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool malwareClassifierAnalysis::IsInitialized() const {
  return true;
}

void malwareClassifierAnalysis::InternalSwap(malwareClassifierAnalysis* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.binarymodelresult_)
      + sizeof(malwareClassifierAnalysis::_impl_.binarymodelresult_)
      - PROTOBUF_FIELD_OFFSET(malwareClassifierAnalysis, _impl_.multifamilyresult_)>(
          reinterpret_cast<char*>(&_impl_.multifamilyresult_),
          reinterpret_cast<char*>(&other->_impl_.multifamilyresult_));
}

::google::protobuf::Metadata malwareClassifierAnalysis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_imgDetails_2eproto_getter,
                                   &descriptor_table_imgDetails_2eproto_once,
                                   file_level_metadata_imgDetails_2eproto[0]);
}
// ===================================================================

class ImgDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ImgDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_._has_bits_);
};

ImgDetails::ImgDetails(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImgDetails)
}
inline PROTOBUF_NDEBUG_INLINE ImgDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        publisher_(arena, from.publisher_),
        catafile_(arena, from.catafile_),
        timestamp_(arena, from.timestamp_),
        vsignchainversion_(arena, from.vsignchainversion_),
        digestalgorithm_(arena, from.digestalgorithm_),
        imphase_hash_(arena, from.imphase_hash_),
        imphash_string_(arena, from.imphash_string_),
        permission_(arena, from.permission_),
        company_(arena, from.company_),
        description_(arena, from.description_),
        product_(arena, from.product_),
        internalname_(arena, from.internalname_),
        copyrights_(arena, from.copyrights_),
        orgfilename_(arena, from.orgfilename_),
        productversion_(arena, from.productversion_),
        fileversion_(arena, from.fileversion_),
        mimetype_(arena, from.mimetype_),
        filetypeext_(arena, from.filetypeext_),
        writetime_(arena, from.writetime_),
        accesstime_(arena, from.accesstime_),
        createtime_(arena, from.createtime_),
        md5le_buffer_(arena, from.md5le_buffer_),
        sha1_buffer_(arena, from.sha1_buffer_),
        sha256_buffer_(arena, from.sha256_buffer_),
        sha512_buffer_(arena, from.sha512_buffer_),
        status_(arena, from.status_),
        thumbprint_(arena, from.thumbprint_),
        sign_alg_(arena, from.sign_alg_),
        filepath_(arena, from.filepath_),
        importfunctionstring_(arena, from.importfunctionstring_),
        properfilepath_(arena, from.properfilepath_),
        patternstring_(arena, from.patternstring_),
        errorcodestring_(arena, from.errorcodestring_),
        importarray_(arena, from.importarray_),
        featurearray_(arena, from.featurearray_) {}

ImgDetails::ImgDetails(
    ::google::protobuf::Arena* arena,
    const ImgDetails& from)
    : ::google::protobuf::Message(arena) {
  ImgDetails* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mcanalysis_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::malwareClassifierAnalysis>(
                              arena, *from._impl_.mcanalysis_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, filesize_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, filesize_),
           offsetof(Impl_, patternoffset_) -
               offsetof(Impl_, filesize_) +
               sizeof(Impl_::patternoffset_));

  // @@protoc_insertion_point(copy_constructor:ImgDetails)
}
inline PROTOBUF_NDEBUG_INLINE ImgDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        publisher_(arena),
        catafile_(arena),
        timestamp_(arena),
        vsignchainversion_(arena),
        digestalgorithm_(arena),
        imphase_hash_(arena),
        imphash_string_(arena),
        permission_(arena),
        company_(arena),
        description_(arena),
        product_(arena),
        internalname_(arena),
        copyrights_(arena),
        orgfilename_(arena),
        productversion_(arena),
        fileversion_(arena),
        mimetype_(arena),
        filetypeext_(arena),
        writetime_(arena),
        accesstime_(arena),
        createtime_(arena),
        md5le_buffer_(arena),
        sha1_buffer_(arena),
        sha256_buffer_(arena),
        sha512_buffer_(arena),
        status_(arena),
        thumbprint_(arena),
        sign_alg_(arena),
        filepath_(arena),
        importfunctionstring_(arena),
        properfilepath_(arena),
        patternstring_(arena),
        errorcodestring_(arena),
        importarray_(arena),
        featurearray_(arena) {}

inline void ImgDetails::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mcanalysis_),
           0,
           offsetof(Impl_, patternoffset_) -
               offsetof(Impl_, mcanalysis_) +
               sizeof(Impl_::patternoffset_));
}
ImgDetails::~ImgDetails() {
  // @@protoc_insertion_point(destructor:ImgDetails)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImgDetails::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.publisher_.Destroy();
  _impl_.catafile_.Destroy();
  _impl_.timestamp_.Destroy();
  _impl_.vsignchainversion_.Destroy();
  _impl_.digestalgorithm_.Destroy();
  _impl_.imphase_hash_.Destroy();
  _impl_.imphash_string_.Destroy();
  _impl_.permission_.Destroy();
  _impl_.company_.Destroy();
  _impl_.description_.Destroy();
  _impl_.product_.Destroy();
  _impl_.internalname_.Destroy();
  _impl_.copyrights_.Destroy();
  _impl_.orgfilename_.Destroy();
  _impl_.productversion_.Destroy();
  _impl_.fileversion_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.filetypeext_.Destroy();
  _impl_.writetime_.Destroy();
  _impl_.accesstime_.Destroy();
  _impl_.createtime_.Destroy();
  _impl_.md5le_buffer_.Destroy();
  _impl_.sha1_buffer_.Destroy();
  _impl_.sha256_buffer_.Destroy();
  _impl_.sha512_buffer_.Destroy();
  _impl_.status_.Destroy();
  _impl_.thumbprint_.Destroy();
  _impl_.sign_alg_.Destroy();
  _impl_.filepath_.Destroy();
  _impl_.importfunctionstring_.Destroy();
  _impl_.properfilepath_.Destroy();
  _impl_.patternstring_.Destroy();
  _impl_.errorcodestring_.Destroy();
  _impl_.importarray_.Destroy();
  _impl_.featurearray_.Destroy();
  delete _impl_.mcanalysis_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ImgDetails::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_._cached_size_),
              false,
          },
          &ImgDetails::MergeImpl,
          &ImgDetails::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ImgDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ImgDetails)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publisher_.ClearToEmpty();
  _impl_.catafile_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.vsignchainversion_.ClearToEmpty();
  _impl_.digestalgorithm_.ClearToEmpty();
  _impl_.imphase_hash_.ClearToEmpty();
  _impl_.imphash_string_.ClearToEmpty();
  _impl_.permission_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.product_.ClearToEmpty();
  _impl_.internalname_.ClearToEmpty();
  _impl_.copyrights_.ClearToEmpty();
  _impl_.orgfilename_.ClearToEmpty();
  _impl_.productversion_.ClearToEmpty();
  _impl_.fileversion_.ClearToEmpty();
  _impl_.mimetype_.ClearToEmpty();
  _impl_.filetypeext_.ClearToEmpty();
  _impl_.writetime_.ClearToEmpty();
  _impl_.accesstime_.ClearToEmpty();
  _impl_.createtime_.ClearToEmpty();
  _impl_.md5le_buffer_.ClearToEmpty();
  _impl_.sha1_buffer_.ClearToEmpty();
  _impl_.sha256_buffer_.ClearToEmpty();
  _impl_.sha512_buffer_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.thumbprint_.ClearToEmpty();
  _impl_.sign_alg_.ClearToEmpty();
  _impl_.filepath_.ClearToEmpty();
  _impl_.importfunctionstring_.ClearToEmpty();
  _impl_.properfilepath_.ClearToEmpty();
  _impl_.patternstring_.ClearToEmpty();
  _impl_.errorcodestring_.ClearToEmpty();
  _impl_.importarray_.ClearToEmpty();
  _impl_.featurearray_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.mcanalysis_ != nullptr);
    _impl_.mcanalysis_->Clear();
  }
  ::memset(&_impl_.filesize_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.patternoffset_) -
      reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.patternoffset_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImgDetails::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 50, 1, 0, 9> ImgDetails::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_._has_bits_),
    0, // no _extensions_
    52, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    50,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ImgDetails_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ImgDetails>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes publisher = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.publisher_)}},
    // bytes CataFile = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.catafile_)}},
    // bytes TimeStamp = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.timestamp_)}},
    // bytes VSignChainversion = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.vsignchainversion_)}},
    // bytes DigestAlgorithm = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.digestalgorithm_)}},
    // bytes Imphase_hash = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.imphase_hash_)}},
    // bytes imphash_string = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.imphash_string_)}},
    // bytes Permission = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.permission_)}},
    // bytes Company = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.company_)}},
    // bytes Description = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.description_)}},
    // bytes Product = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.product_)}},
    // bytes InternalName = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.internalname_)}},
    // bytes CopyRights = 13;
    {::_pbi::TcParser::FastBS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.copyrights_)}},
    // bytes Orgfilename = 14;
    {::_pbi::TcParser::FastBS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.orgfilename_)}},
    // bytes ProductVersion = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.productversion_)}},
    // bytes FileVersion = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.fileversion_)}},
    // bytes Mimetype = 17;
    {::_pbi::TcParser::FastBS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.mimetype_)}},
    // bytes filetypeext = 18;
    {::_pbi::TcParser::FastBS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.filetypeext_)}},
    // bytes Writetime = 19;
    {::_pbi::TcParser::FastBS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.writetime_)}},
    // bytes Accesstime = 20;
    {::_pbi::TcParser::FastBS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.accesstime_)}},
    // bytes Createtime = 21;
    {::_pbi::TcParser::FastBS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.createtime_)}},
    // bytes MD5LE_buffer = 22;
    {::_pbi::TcParser::FastBS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.md5le_buffer_)}},
    // bytes SHA1_buffer = 23;
    {::_pbi::TcParser::FastBS2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sha1_buffer_)}},
    // bytes SHA256_buffer = 24;
    {::_pbi::TcParser::FastBS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sha256_buffer_)}},
    // bytes SHA512_buffer = 25;
    {::_pbi::TcParser::FastBS2,
     {458, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sha512_buffer_)}},
    // bytes status = 26;
    {::_pbi::TcParser::FastBS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.status_)}},
    // bytes thumbprint = 27;
    {::_pbi::TcParser::FastBS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.thumbprint_)}},
    // bytes sign_alg = 28;
    {::_pbi::TcParser::FastBS2,
     {482, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sign_alg_)}},
    // int32 fileSize = 29;
    {::_pbi::TcParser::FastV32S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.filesize_)}},
    // int32 Signtype = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.signtype_)}},
    // int32 NumberofCertChains = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.numberofcertchains_)}},
  }}, {{
    33, 0, 2,
    8448, 32, 65520, 46,
    65535, 65535
  }}, {{
    // bytes publisher = 1;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.publisher_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes CataFile = 2;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.catafile_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes TimeStamp = 3;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes VSignChainversion = 4;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.vsignchainversion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes DigestAlgorithm = 5;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.digestalgorithm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Imphase_hash = 6;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.imphase_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes imphash_string = 7;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.imphash_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Permission = 8;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.permission_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Company = 9;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.company_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Description = 10;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Product = 11;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.product_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes InternalName = 12;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.internalname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes CopyRights = 13;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.copyrights_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Orgfilename = 14;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.orgfilename_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes ProductVersion = 15;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.productversion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes FileVersion = 16;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.fileversion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Mimetype = 17;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.mimetype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes filetypeext = 18;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.filetypeext_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Writetime = 19;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.writetime_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Accesstime = 20;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.accesstime_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes Createtime = 21;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.createtime_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes MD5LE_buffer = 22;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.md5le_buffer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes SHA1_buffer = 23;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sha1_buffer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes SHA256_buffer = 24;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sha256_buffer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes SHA512_buffer = 25;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sha512_buffer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes status = 26;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes thumbprint = 27;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.thumbprint_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes sign_alg = 28;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.sign_alg_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 fileSize = 29;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.filesize_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 Signtype = 30;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.signtype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 NumberofCertChains = 31;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.numberofcertchains_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 Characteristics = 32;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.characteristics_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 Filetype = 33;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.filetype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 Binarytime = 34;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.binarytime_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 BinaryType = 35;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.binarytype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 MachineType = 36;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.machinetype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 isMalware = 37;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.ismalware_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float confidence = 38;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.confidence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 impMalware = 39;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.impmalware_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 featureMalware = 40;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.featuremalware_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes filePath = 42;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.filepath_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 ErrorCode = 43;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.errorcode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .malwareClassifierAnalysis MCAnalysis = 44;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.mcanalysis_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes importFunctionstring = 45;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.importfunctionstring_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes properFilePath = 47;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.properfilepath_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes patternstring = 48;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.patternstring_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 patternOffset = 49;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.patternoffset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes ErrorCodestring = 50;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.errorcodestring_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes importArray = 51;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.importarray_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes featureArray = 52;
    {PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.featurearray_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::malwareClassifierAnalysis>()},
  }}, {{
  }},
};

::uint8_t* ImgDetails::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImgDetails)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes publisher = 1;
  if (!this->_internal_publisher().empty()) {
    const std::string& _s = this->_internal_publisher();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes CataFile = 2;
  if (!this->_internal_catafile().empty()) {
    const std::string& _s = this->_internal_catafile();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes TimeStamp = 3;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // bytes VSignChainversion = 4;
  if (!this->_internal_vsignchainversion().empty()) {
    const std::string& _s = this->_internal_vsignchainversion();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes DigestAlgorithm = 5;
  if (!this->_internal_digestalgorithm().empty()) {
    const std::string& _s = this->_internal_digestalgorithm();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes Imphase_hash = 6;
  if (!this->_internal_imphase_hash().empty()) {
    const std::string& _s = this->_internal_imphase_hash();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes imphash_string = 7;
  if (!this->_internal_imphash_string().empty()) {
    const std::string& _s = this->_internal_imphash_string();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes Permission = 8;
  if (!this->_internal_permission().empty()) {
    const std::string& _s = this->_internal_permission();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // bytes Company = 9;
  if (!this->_internal_company().empty()) {
    const std::string& _s = this->_internal_company();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bytes Description = 10;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // bytes Product = 11;
  if (!this->_internal_product().empty()) {
    const std::string& _s = this->_internal_product();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // bytes InternalName = 12;
  if (!this->_internal_internalname().empty()) {
    const std::string& _s = this->_internal_internalname();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // bytes CopyRights = 13;
  if (!this->_internal_copyrights().empty()) {
    const std::string& _s = this->_internal_copyrights();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  // bytes Orgfilename = 14;
  if (!this->_internal_orgfilename().empty()) {
    const std::string& _s = this->_internal_orgfilename();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  // bytes ProductVersion = 15;
  if (!this->_internal_productversion().empty()) {
    const std::string& _s = this->_internal_productversion();
    target = stream->WriteBytesMaybeAliased(15, _s, target);
  }

  // bytes FileVersion = 16;
  if (!this->_internal_fileversion().empty()) {
    const std::string& _s = this->_internal_fileversion();
    target = stream->WriteBytesMaybeAliased(16, _s, target);
  }

  // bytes Mimetype = 17;
  if (!this->_internal_mimetype().empty()) {
    const std::string& _s = this->_internal_mimetype();
    target = stream->WriteBytesMaybeAliased(17, _s, target);
  }

  // bytes filetypeext = 18;
  if (!this->_internal_filetypeext().empty()) {
    const std::string& _s = this->_internal_filetypeext();
    target = stream->WriteBytesMaybeAliased(18, _s, target);
  }

  // bytes Writetime = 19;
  if (!this->_internal_writetime().empty()) {
    const std::string& _s = this->_internal_writetime();
    target = stream->WriteBytesMaybeAliased(19, _s, target);
  }

  // bytes Accesstime = 20;
  if (!this->_internal_accesstime().empty()) {
    const std::string& _s = this->_internal_accesstime();
    target = stream->WriteBytesMaybeAliased(20, _s, target);
  }

  // bytes Createtime = 21;
  if (!this->_internal_createtime().empty()) {
    const std::string& _s = this->_internal_createtime();
    target = stream->WriteBytesMaybeAliased(21, _s, target);
  }

  // bytes MD5LE_buffer = 22;
  if (!this->_internal_md5le_buffer().empty()) {
    const std::string& _s = this->_internal_md5le_buffer();
    target = stream->WriteBytesMaybeAliased(22, _s, target);
  }

  // bytes SHA1_buffer = 23;
  if (!this->_internal_sha1_buffer().empty()) {
    const std::string& _s = this->_internal_sha1_buffer();
    target = stream->WriteBytesMaybeAliased(23, _s, target);
  }

  // bytes SHA256_buffer = 24;
  if (!this->_internal_sha256_buffer().empty()) {
    const std::string& _s = this->_internal_sha256_buffer();
    target = stream->WriteBytesMaybeAliased(24, _s, target);
  }

  // bytes SHA512_buffer = 25;
  if (!this->_internal_sha512_buffer().empty()) {
    const std::string& _s = this->_internal_sha512_buffer();
    target = stream->WriteBytesMaybeAliased(25, _s, target);
  }

  // bytes status = 26;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    target = stream->WriteBytesMaybeAliased(26, _s, target);
  }

  // bytes thumbprint = 27;
  if (!this->_internal_thumbprint().empty()) {
    const std::string& _s = this->_internal_thumbprint();
    target = stream->WriteBytesMaybeAliased(27, _s, target);
  }

  // bytes sign_alg = 28;
  if (!this->_internal_sign_alg().empty()) {
    const std::string& _s = this->_internal_sign_alg();
    target = stream->WriteBytesMaybeAliased(28, _s, target);
  }

  // int32 fileSize = 29;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        29, this->_internal_filesize(), target);
  }

  // int32 Signtype = 30;
  if (this->_internal_signtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        30, this->_internal_signtype(), target);
  }

  // int32 NumberofCertChains = 31;
  if (this->_internal_numberofcertchains() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        31, this->_internal_numberofcertchains(), target);
  }

  // int32 Characteristics = 32;
  if (this->_internal_characteristics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        32, this->_internal_characteristics(), target);
  }

  // int32 Filetype = 33;
  if (this->_internal_filetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        33, this->_internal_filetype(), target);
  }

  // int32 Binarytime = 34;
  if (this->_internal_binarytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        34, this->_internal_binarytime(), target);
  }

  // int32 BinaryType = 35;
  if (this->_internal_binarytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        35, this->_internal_binarytype(), target);
  }

  // int32 MachineType = 36;
  if (this->_internal_machinetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        36, this->_internal_machinetype(), target);
  }

  // int32 isMalware = 37;
  if (this->_internal_ismalware() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        37, this->_internal_ismalware(), target);
  }

  // float confidence = 38;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        38, this->_internal_confidence(), target);
  }

  // int32 impMalware = 39;
  if (this->_internal_impmalware() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        39, this->_internal_impmalware(), target);
  }

  // int32 featureMalware = 40;
  if (this->_internal_featuremalware() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        40, this->_internal_featuremalware(), target);
  }

  // bytes filePath = 42;
  if (!this->_internal_filepath().empty()) {
    const std::string& _s = this->_internal_filepath();
    target = stream->WriteBytesMaybeAliased(42, _s, target);
  }

  // int32 ErrorCode = 43;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        43, this->_internal_errorcode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .malwareClassifierAnalysis MCAnalysis = 44;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        44, *_impl_.mcanalysis_, _impl_.mcanalysis_->GetCachedSize(), target, stream);
  }

  // bytes importFunctionstring = 45;
  if (!this->_internal_importfunctionstring().empty()) {
    const std::string& _s = this->_internal_importfunctionstring();
    target = stream->WriteBytesMaybeAliased(45, _s, target);
  }

  // bytes properFilePath = 47;
  if (!this->_internal_properfilepath().empty()) {
    const std::string& _s = this->_internal_properfilepath();
    target = stream->WriteBytesMaybeAliased(47, _s, target);
  }

  // bytes patternstring = 48;
  if (!this->_internal_patternstring().empty()) {
    const std::string& _s = this->_internal_patternstring();
    target = stream->WriteBytesMaybeAliased(48, _s, target);
  }

  // int32 patternOffset = 49;
  if (this->_internal_patternoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        49, this->_internal_patternoffset(), target);
  }

  // bytes ErrorCodestring = 50;
  if (!this->_internal_errorcodestring().empty()) {
    const std::string& _s = this->_internal_errorcodestring();
    target = stream->WriteBytesMaybeAliased(50, _s, target);
  }

  // bytes importArray = 51;
  if (!this->_internal_importarray().empty()) {
    const std::string& _s = this->_internal_importarray();
    target = stream->WriteBytesMaybeAliased(51, _s, target);
  }

  // bytes featureArray = 52;
  if (!this->_internal_featurearray().empty()) {
    const std::string& _s = this->_internal_featurearray();
    target = stream->WriteBytesMaybeAliased(52, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImgDetails)
  return target;
}

::size_t ImgDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImgDetails)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes publisher = 1;
  if (!this->_internal_publisher().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_publisher());
  }

  // bytes CataFile = 2;
  if (!this->_internal_catafile().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_catafile());
  }

  // bytes TimeStamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_timestamp());
  }

  // bytes VSignChainversion = 4;
  if (!this->_internal_vsignchainversion().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_vsignchainversion());
  }

  // bytes DigestAlgorithm = 5;
  if (!this->_internal_digestalgorithm().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_digestalgorithm());
  }

  // bytes Imphase_hash = 6;
  if (!this->_internal_imphase_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_imphase_hash());
  }

  // bytes imphash_string = 7;
  if (!this->_internal_imphash_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_imphash_string());
  }

  // bytes Permission = 8;
  if (!this->_internal_permission().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_permission());
  }

  // bytes Company = 9;
  if (!this->_internal_company().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_company());
  }

  // bytes Description = 10;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_description());
  }

  // bytes Product = 11;
  if (!this->_internal_product().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_product());
  }

  // bytes InternalName = 12;
  if (!this->_internal_internalname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_internalname());
  }

  // bytes CopyRights = 13;
  if (!this->_internal_copyrights().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_copyrights());
  }

  // bytes Orgfilename = 14;
  if (!this->_internal_orgfilename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_orgfilename());
  }

  // bytes ProductVersion = 15;
  if (!this->_internal_productversion().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_productversion());
  }

  // bytes FileVersion = 16;
  if (!this->_internal_fileversion().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_fileversion());
  }

  // bytes Mimetype = 17;
  if (!this->_internal_mimetype().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_mimetype());
  }

  // bytes filetypeext = 18;
  if (!this->_internal_filetypeext().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_filetypeext());
  }

  // bytes Writetime = 19;
  if (!this->_internal_writetime().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_writetime());
  }

  // bytes Accesstime = 20;
  if (!this->_internal_accesstime().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_accesstime());
  }

  // bytes Createtime = 21;
  if (!this->_internal_createtime().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_createtime());
  }

  // bytes MD5LE_buffer = 22;
  if (!this->_internal_md5le_buffer().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_md5le_buffer());
  }

  // bytes SHA1_buffer = 23;
  if (!this->_internal_sha1_buffer().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sha1_buffer());
  }

  // bytes SHA256_buffer = 24;
  if (!this->_internal_sha256_buffer().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sha256_buffer());
  }

  // bytes SHA512_buffer = 25;
  if (!this->_internal_sha512_buffer().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sha512_buffer());
  }

  // bytes status = 26;
  if (!this->_internal_status().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_status());
  }

  // bytes thumbprint = 27;
  if (!this->_internal_thumbprint().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_thumbprint());
  }

  // bytes sign_alg = 28;
  if (!this->_internal_sign_alg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sign_alg());
  }

  // bytes filePath = 42;
  if (!this->_internal_filepath().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_filepath());
  }

  // bytes importFunctionstring = 45;
  if (!this->_internal_importfunctionstring().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_importfunctionstring());
  }

  // bytes properFilePath = 47;
  if (!this->_internal_properfilepath().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_properfilepath());
  }

  // bytes patternstring = 48;
  if (!this->_internal_patternstring().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_patternstring());
  }

  // bytes ErrorCodestring = 50;
  if (!this->_internal_errorcodestring().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_errorcodestring());
  }

  // bytes importArray = 51;
  if (!this->_internal_importarray().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_importarray());
  }

  // bytes featureArray = 52;
  if (!this->_internal_featurearray().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_featurearray());
  }

  // .malwareClassifierAnalysis MCAnalysis = 44;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mcanalysis_);
  }

  // int32 fileSize = 29;
  if (this->_internal_filesize() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_filesize());
  }

  // int32 Signtype = 30;
  if (this->_internal_signtype() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_signtype());
  }

  // int32 NumberofCertChains = 31;
  if (this->_internal_numberofcertchains() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_numberofcertchains());
  }

  // int32 Characteristics = 32;
  if (this->_internal_characteristics() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_characteristics());
  }

  // int32 Filetype = 33;
  if (this->_internal_filetype() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_filetype());
  }

  // int32 Binarytime = 34;
  if (this->_internal_binarytime() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_binarytime());
  }

  // int32 BinaryType = 35;
  if (this->_internal_binarytype() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_binarytype());
  }

  // int32 MachineType = 36;
  if (this->_internal_machinetype() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_machinetype());
  }

  // int32 isMalware = 37;
  if (this->_internal_ismalware() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_ismalware());
  }

  // float confidence = 38;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 6;
  }

  // int32 impMalware = 39;
  if (this->_internal_impmalware() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_impmalware());
  }

  // int32 featureMalware = 40;
  if (this->_internal_featuremalware() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_featuremalware());
  }

  // int32 ErrorCode = 43;
  if (this->_internal_errorcode() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_errorcode());
  }

  // int32 patternOffset = 49;
  if (this->_internal_patternoffset() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_patternoffset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ImgDetails::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImgDetails*>(&to_msg);
  auto& from = static_cast<const ImgDetails&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ImgDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_publisher().empty()) {
    _this->_internal_set_publisher(from._internal_publisher());
  }
  if (!from._internal_catafile().empty()) {
    _this->_internal_set_catafile(from._internal_catafile());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_vsignchainversion().empty()) {
    _this->_internal_set_vsignchainversion(from._internal_vsignchainversion());
  }
  if (!from._internal_digestalgorithm().empty()) {
    _this->_internal_set_digestalgorithm(from._internal_digestalgorithm());
  }
  if (!from._internal_imphase_hash().empty()) {
    _this->_internal_set_imphase_hash(from._internal_imphase_hash());
  }
  if (!from._internal_imphash_string().empty()) {
    _this->_internal_set_imphash_string(from._internal_imphash_string());
  }
  if (!from._internal_permission().empty()) {
    _this->_internal_set_permission(from._internal_permission());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_product().empty()) {
    _this->_internal_set_product(from._internal_product());
  }
  if (!from._internal_internalname().empty()) {
    _this->_internal_set_internalname(from._internal_internalname());
  }
  if (!from._internal_copyrights().empty()) {
    _this->_internal_set_copyrights(from._internal_copyrights());
  }
  if (!from._internal_orgfilename().empty()) {
    _this->_internal_set_orgfilename(from._internal_orgfilename());
  }
  if (!from._internal_productversion().empty()) {
    _this->_internal_set_productversion(from._internal_productversion());
  }
  if (!from._internal_fileversion().empty()) {
    _this->_internal_set_fileversion(from._internal_fileversion());
  }
  if (!from._internal_mimetype().empty()) {
    _this->_internal_set_mimetype(from._internal_mimetype());
  }
  if (!from._internal_filetypeext().empty()) {
    _this->_internal_set_filetypeext(from._internal_filetypeext());
  }
  if (!from._internal_writetime().empty()) {
    _this->_internal_set_writetime(from._internal_writetime());
  }
  if (!from._internal_accesstime().empty()) {
    _this->_internal_set_accesstime(from._internal_accesstime());
  }
  if (!from._internal_createtime().empty()) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (!from._internal_md5le_buffer().empty()) {
    _this->_internal_set_md5le_buffer(from._internal_md5le_buffer());
  }
  if (!from._internal_sha1_buffer().empty()) {
    _this->_internal_set_sha1_buffer(from._internal_sha1_buffer());
  }
  if (!from._internal_sha256_buffer().empty()) {
    _this->_internal_set_sha256_buffer(from._internal_sha256_buffer());
  }
  if (!from._internal_sha512_buffer().empty()) {
    _this->_internal_set_sha512_buffer(from._internal_sha512_buffer());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_thumbprint().empty()) {
    _this->_internal_set_thumbprint(from._internal_thumbprint());
  }
  if (!from._internal_sign_alg().empty()) {
    _this->_internal_set_sign_alg(from._internal_sign_alg());
  }
  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (!from._internal_importfunctionstring().empty()) {
    _this->_internal_set_importfunctionstring(from._internal_importfunctionstring());
  }
  if (!from._internal_properfilepath().empty()) {
    _this->_internal_set_properfilepath(from._internal_properfilepath());
  }
  if (!from._internal_patternstring().empty()) {
    _this->_internal_set_patternstring(from._internal_patternstring());
  }
  if (!from._internal_errorcodestring().empty()) {
    _this->_internal_set_errorcodestring(from._internal_errorcodestring());
  }
  if (!from._internal_importarray().empty()) {
    _this->_internal_set_importarray(from._internal_importarray());
  }
  if (!from._internal_featurearray().empty()) {
    _this->_internal_set_featurearray(from._internal_featurearray());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.mcanalysis_ != nullptr);
    if (_this->_impl_.mcanalysis_ == nullptr) {
      _this->_impl_.mcanalysis_ =
          ::google::protobuf::Message::CopyConstruct<::malwareClassifierAnalysis>(arena, *from._impl_.mcanalysis_);
    } else {
      _this->_impl_.mcanalysis_->MergeFrom(*from._impl_.mcanalysis_);
    }
  }
  if (from._internal_filesize() != 0) {
    _this->_impl_.filesize_ = from._impl_.filesize_;
  }
  if (from._internal_signtype() != 0) {
    _this->_impl_.signtype_ = from._impl_.signtype_;
  }
  if (from._internal_numberofcertchains() != 0) {
    _this->_impl_.numberofcertchains_ = from._impl_.numberofcertchains_;
  }
  if (from._internal_characteristics() != 0) {
    _this->_impl_.characteristics_ = from._impl_.characteristics_;
  }
  if (from._internal_filetype() != 0) {
    _this->_impl_.filetype_ = from._impl_.filetype_;
  }
  if (from._internal_binarytime() != 0) {
    _this->_impl_.binarytime_ = from._impl_.binarytime_;
  }
  if (from._internal_binarytype() != 0) {
    _this->_impl_.binarytype_ = from._impl_.binarytype_;
  }
  if (from._internal_machinetype() != 0) {
    _this->_impl_.machinetype_ = from._impl_.machinetype_;
  }
  if (from._internal_ismalware() != 0) {
    _this->_impl_.ismalware_ = from._impl_.ismalware_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_impl_.confidence_ = from._impl_.confidence_;
  }
  if (from._internal_impmalware() != 0) {
    _this->_impl_.impmalware_ = from._impl_.impmalware_;
  }
  if (from._internal_featuremalware() != 0) {
    _this->_impl_.featuremalware_ = from._impl_.featuremalware_;
  }
  if (from._internal_errorcode() != 0) {
    _this->_impl_.errorcode_ = from._impl_.errorcode_;
  }
  if (from._internal_patternoffset() != 0) {
    _this->_impl_.patternoffset_ = from._impl_.patternoffset_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImgDetails::CopyFrom(const ImgDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImgDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImgDetails::IsInitialized() const {
  return true;
}

void ImgDetails::InternalSwap(ImgDetails* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.publisher_, &other->_impl_.publisher_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.catafile_, &other->_impl_.catafile_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vsignchainversion_, &other->_impl_.vsignchainversion_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.digestalgorithm_, &other->_impl_.digestalgorithm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imphase_hash_, &other->_impl_.imphase_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imphash_string_, &other->_impl_.imphash_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.permission_, &other->_impl_.permission_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_, &other->_impl_.company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.product_, &other->_impl_.product_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.internalname_, &other->_impl_.internalname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.copyrights_, &other->_impl_.copyrights_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orgfilename_, &other->_impl_.orgfilename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.productversion_, &other->_impl_.productversion_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fileversion_, &other->_impl_.fileversion_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mimetype_, &other->_impl_.mimetype_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filetypeext_, &other->_impl_.filetypeext_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.writetime_, &other->_impl_.writetime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.accesstime_, &other->_impl_.accesstime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.createtime_, &other->_impl_.createtime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.md5le_buffer_, &other->_impl_.md5le_buffer_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sha1_buffer_, &other->_impl_.sha1_buffer_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sha256_buffer_, &other->_impl_.sha256_buffer_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sha512_buffer_, &other->_impl_.sha512_buffer_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.thumbprint_, &other->_impl_.thumbprint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sign_alg_, &other->_impl_.sign_alg_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filepath_, &other->_impl_.filepath_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.importfunctionstring_, &other->_impl_.importfunctionstring_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.properfilepath_, &other->_impl_.properfilepath_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.patternstring_, &other->_impl_.patternstring_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.errorcodestring_, &other->_impl_.errorcodestring_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.importarray_, &other->_impl_.importarray_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.featurearray_, &other->_impl_.featurearray_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.patternoffset_)
      + sizeof(ImgDetails::_impl_.patternoffset_)
      - PROTOBUF_FIELD_OFFSET(ImgDetails, _impl_.mcanalysis_)>(
          reinterpret_cast<char*>(&_impl_.mcanalysis_),
          reinterpret_cast<char*>(&other->_impl_.mcanalysis_));
}

::google::protobuf::Metadata ImgDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_imgDetails_2eproto_getter,
                                   &descriptor_table_imgDetails_2eproto_once,
                                   file_level_metadata_imgDetails_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_imgDetails_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
